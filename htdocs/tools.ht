Title: mspgcc - Tools
css: styles.css

<H2>Tools</H2>
<H3>Overview</H3><!-- ******************************* -->
<P>You've got a compiler, but what now? Here you can find some tools that make the environment more complete.
You can find pyBSL which can communicate with the MSP430 BootStrapLoader (ROM) in Flash devices.
</P>
<P>JTAG download has finally arrived and is currently beta software!
</P>
<P>A simulator is under development. You can step through your programms before downloading
to a real device.</P>

<H3>pySerJTAG and Serial-JTAG adapter</H3><!-- ******************************* -->
<P>pySerJTAG is the PC side software for the Serial-JTAG adpater. The PC software is open and
written in Python. It should run on the same platforms as pyBSL (Win32, Linux, BSD and more
POSIX compatible systems). The command line options are compatible with pyBSL and pyJTAG.
</P>

<P>The hardware design is open. The schematics can be found in the CVS module
"hardware/serialJTAG". A binary of the firmware for this design is here:
<A href="serjtag.zip">serjtag.zip</A> (&lt;10k, beta).
</P>
The lastest files can be checked out via <A href="http://sourceforge.net/cvs/?group_id=42303">Anonymous CVS</A>. (empty password)<BR>
For the PC:<BR>
<code style="background:lightgrey;font-size:10pt">cvs -z3 -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc co pyserjtag</code><BR>
For the adapter:<BR>
<code style="background:lightgrey;font-size:10pt">cvs -z3 -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc co serJTAGfirmware</code><BR>
For the hardware (Eagle schematics):<BR>
<code style="background:lightgrey;font-size:10pt">cvs -z3 -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc co hardware/serialJTAG</code><BR>
don't forget to login first if you want to get either of those above:<BR>
<code style="background:lightgrey;font-size:10pt">cvs -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc login</code><BR>
</P>

<P>Why? The parallel port has some drawbacks such as missing OS support for bit banging.
We cannot access every platform that mspgcc users use. Therefore it's impossible to distribute
binaries for all. The Serial-JTAG adapter moves the proprietary code out to that box and
the user software on the PC can be open source.
It will allow us to provide debug features in the near future.
</P>

<H3>pyJTAG</H3><!-- ******************************* -->
<P>Software for the parallel JTAG adapter. It works with Flash devices (MSP430F1xx and F4xx):
erase and download new software or upload RAM or Flash data from the device back to the PC.
It uses the parallel port hardware you get with the FET kits, schematics can be found on
TI's site.
</P>

<P>Features:<UL>
        <LI>loads TI-Text and Intel-hex</LI>
        <LI>download to Flash and/or RAM, erase, verify</LI>
        <LI>reset and wait for keypress</LI>
        <LI>load addres into R0/PC and run</LI>
        <LI>upload a memory block MSP->PC (output as binary data or hex dump)</LI>
        <LI>download a program, execute it.</LI>
        <LI>written in Python, runs on Win32</LI>
        <LI>use per command line, or in a Python script</LI>
</UL>

For more a complete description, including installation notes and usage examples, look at the
<A href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/*checkout*/mspgcc/pyjtag/readme.txt?rev=HEAD&content-type=text/plain">
readme.txt</A>
</P>

<P><B>Attention!</B> The software needs an additional Python extension, which is only available as
binary. Currently there is a <B>beta</B> version for Win32 and Linux.
</P>
<P>You can download the needed files here: <A href="_parjtag.zip">_parjtag.zip</A>(20k)<BR>
Caveats:<UL>
    <LI>both versions are currently hardwired to LPT1
    <LI>Win32 version only for Python 2.2
    <LI>Linux version needs ppdev (/dev/parport0) and thus a 2.4 Kernel.
</UL>
<BR>
Unpack these files to the pyjtag directory.<BR>
An other warning: The Flash timing cannot accuartely be generated in user mode programms and thus
this library can generate wrong clocks, which yield to bad written Flash.
Don't use this software in production!
</P>

<P>The lastest files can be checked out via <A href="http://sourceforge.net/cvs/?group_id=42303">Anonymous CVS</A>. (empty password)<BR>
<code style="background:lightgrey;font-size:10pt">cvs -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc login</code><BR>
<code style="background:lightgrey;font-size:10pt">cvs -z3 -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc co pyjtag</code><BR>
</P>


<H3>pyBSL</H3><!-- ******************************* -->
<P>Software for the bootstrap loader. Works with Flash devices (MSP430F1xx and F4xx): erase and
download new software or upload RAM or Flash data from the device back to the PC.
</P>

<P>Features:<UL>
	<LI>loads TI-Text and Intel-hex</LI>
	<LI>download to Flash and/or RAM, erase, verify</LI>
	<LI>reset and wait for keypress (to run a device directly from the port power)</LI>
	<LI>load addres into R0/PC and run</LI>
	<LI>password file can be any datafile, e.g. the one used to program the device in an earlier session</LI>
	<LI>upload a memory block MSP->PC (output as binary data or hex dump)</LI>
	<LI>download a program, execute it, resynchronize and uplaod results. (for testing and calibration)</LI>
	<LI>written in Python, runs on Win32, BSD, Linux (and other POSIX compatible systems) (and Jython)</LI>
	<LI>use per command line, or in a Python script</LI>
        <LI>downloadable replacement MSP430-BSLs</LI>
</UL>

For more a complete description, including installation notes and usage examples, look at the
<A href="http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/*checkout*/mspgcc/pybsl/readme.txt?rev=HEAD&content-type=text/plain">
readme.txt</A>
</P>

<P>On the <A href="http://sourceforge.net/projects/mspgcc/">project page</A> is a link to the download area where
a tarball can be found.
The lastest files can be checked out via <A href="http://sourceforge.net/cvs/?group_id=42303">Anonymous CVS</A>. (empty password)<BR>
<code style="background:lightgrey;font-size:10pt">cvs -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc login</code><BR>
<code style="background:lightgrey;font-size:10pt">cvs -z3 -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc co pybsl</code><BR>
</P>

<H3>msp430simu</H3><!-- ******************************* -->
<P>The simulator is under development. Currently it allows single stepping through programms, but
no active peripherals are yet supported (values can be written at any address, but reading has the
same effect as reading from RAM).
</P>
<P>It has a simple GUI with memory and disassembler views, logging
output, as well as a file open dialog to select intel hex files. Or it can be embedded in Python
scripts e.g. for automatic testing, etc.
</P>

<P>Requirements:<UL>
<LI>Python 2.1 or newer</LI>
<LI>wxPython for the GUI only</LI>
</UL>
</P>

<P>
The lastest files can be checked out via <A href="http://sourceforge.net/cvs/?group_id=42303">Anonymous CVS</A>. (empty password)<BR>
<code style="background:lightgrey;font-size:10pt">cvs -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc login</code><BR>
<code style="background:lightgrey;font-size:10pt">cvs -z3 -d:pserver:anonymous@cvs.mspgcc.sourceforge.net:/cvsroot/mspgcc co msp430simu</code><BR>
</P>

<P>
Note that GDB has a simulation part too, though the simulators don't solve the same problems.
</P>