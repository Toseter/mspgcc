Title: mspgcc - Appendix E
css: styles.css
author: Dmitry Diky
author-email:diwil@mail.ru
links: doc_links.h

<H2>Appendix E - Tips and tricks</H2>

<OL>
<LI> If you're sure, that main never exits, use -mendup-at=main flag. This
   will save 6 bytes or ROM.

<LI> Avoid passing long argument list to functions. Avoid long returns from
   functions. Perfect function is int, void or pointer returned one. 

<LI> Avoid initialization of global variables within a small function call.
   Instead, assign a value during variable defenition.

<LI> Avoid char -> another type conversions: char variables located everywhere
   in ram, while word vars only at even addresses. So, the code given:
   <pre>
	const char *a = "1234";
	int k;
	k = *((int *)((char *a)+3));
    </pre>
   will result unpredictable CPU behaviour. (sigbus on UNIX)
 
<LI> Avoid to use global variables of small size - waste of ram.

<LI> Avoid to use volatiles unless absolutely necessary.

<LI> Use int instead of char ot unsigned char if you want 8 bit integer. (or fix me)

<LI> Inspect assembler code (-S compiler flag). The compiler cannot eliminate
   dead code in some cases. Do not write dead code :)

<LI> Do not declare your own SFR. They are all declared in include files in
   the way to achieve maximum code performance.

<LI> Avoid to use float '+,-' operations - waste of time (or help me to write
    float library).

<LI> Use shift instead of multiplication on constants 2^N (actually, the
    compiler has to do this job for you when optimization is turned on)

<LI> Use unsigned int for indices - the compiler will snip _lots_ of code.

<LI> Use 'switch - case' instead of consequent if-then-else.

<LI> Use logical 'or' instead of '+' for bitmasks.

<LI> Use 'alloca' instead of 'malloc' for locals.

<LI> Appart from C++ recomendations ;), it would be better to 
<pre>
    #define SMTS 1234567890l
</pre>
instead of declaring
<pre>
    const long smts = 1234567890l;
</pre>

<LI> Bit thests and something:

    At 'while((long)a&0x80000l);' the programm will hang, unless 'a' declared
    as volatile. So, do it!

<LI> Dealy loops are very sophisticated routines. Normally, users do
    something like:
<pre>
    int i = 1234;
    while(i--);</pre> or
<pre>
    for(i=0;i<1234;i++);</pre>
    
    BOTH WILL NOT WORK AS YOU EXPECT!!! The optimizer will detect dead code
    in both examples and will reduce the number of iterrations. So, it may
    remove loop code, or reduce the loop number. Therefore, use timers when
    possible. Alternativly, you can mark these loops as volatile:
<pre>
    for(i=0;i<1234;i++) __asm__ __volatile__("; loop");</pre>
    This example does not introduce any extra code and will work as you
    think.

</OL>



<P>Do not do anything unless you know what you're doing :)</P>



<hr size=1>
<P>Did I miss something?<br>
diwil at mail.ru</P>
